<div class="theme-switch">
  <input type="checkbox" />
  <light-bulb></light-bulb>
</div>

<script webc:keep>
  window.customElements.define('theme-switch', class extends HTMLElement {
    themeKey = 'theme'
    theme = {
      dark: 'dark',
      light: 'light'
    }

    connectedCallback() {
      const component = this.querySelector(':scope .theme-switch')
      const checkbox = this.querySelector(':scope input')
      checkbox.checked = this.getDarkModeCachedValue()
      this.setTheme(checkbox.checked)
      component.addEventListener('click', () => {
        checkbox.checked = !checkbox.checked
        this.setTheme(checkbox.checked)
      })
    }

    isDarkModeEnabled = () => window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches
    setDarkModeCachedValue = (value) => window.localStorage.setItem(this.themeKey, value ? this.theme.dark : this.theme.light)
    getDarkModeCachedValue = () => {
      const state = window.localStorage.getItem(this.themeKey)
      if (state !== null) {
        return state === this.theme.dark
      }
      return this.isDarkModeEnabled()
    }
    setTheme(isDark) {
      console.log('Setting to dark theme', isDark)
      this.setDarkModeCachedValue(isDark)
      if (isDark) {
        document.body.classList.add('theme-dark')
        document.body.classList.remove('theme-light')
      } else {
        document.body.classList.add('theme-light')
        document.body.classList.remove('theme-dark')
      }
    }
  })

</script>

<style webc:keep webc:scoped>
  .theme-switch {
    cursor: pointer;
    color: var(--black);
    display: inline-block;
  }

  .theme-switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }

  .theme-switch input+svg {
    fill: gray;
    font-size: 32px;
    transition: all ease-in-out 0.5s;
  }

  .theme-switch input:checked+svg {
    fill: yellow;
    filter: drop-shadow(0 0 6px yellow);
  }
</style>